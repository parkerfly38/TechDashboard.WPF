using System;
using System.Collections.Generic;
using System.Text;

using Sage.SData.Client;
using SQLite;
using System.Linq;
using TechDashboard.Models;

namespace TechDashboard.Data
{
    public partial class TechDashboardDatabase
    {
        public bool HasValidSetup()
        {
            bool hasValidSetup = false;
            App_Settings appSettings = null;

            lock(_locker)
            {
                appSettings = GetApplicatioinSettings();

                if (appSettings != null)
                {
                    try
                    {
                        hasValidSetup =
                            IsValidSDataConnection(
                                appSettings.IsUsingHttps,
                                appSettings.SDataUrl,
                                appSettings.SDataUserId,
                                appSettings.SDataPassword
                            );
                    }
                    catch (Exception ex)
                    {
                        hasValidSetup = false;

                        System.Diagnostics.Debug.WriteLine("Exception caught in HasValidSetup() method.");
                        System.Diagnostics.Debug.WriteLine(ex.Message);
                    }
                }
            }

            return hasValidSetup;
        }

        public App_Settings GetApplicatioinSettings()
        {
            App_Settings appSettings = null;

            lock (_locker)
            {
                if(_database.TableMappings.Where(tm => tm.TableName == "App_Settings").FirstOrDefault() == null)
                {
                    _database.CreateTable<App_Settings>();
                    _database.Insert(new App_Settings());
                }

                try
                {
                    appSettings = _database.Table<App_Settings>().FirstOrDefault();
                }
                catch(Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine("Exception caught when querying for application settings.");
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                }
            }

            return appSettings;
        }

        protected bool AreSettingsAvailable()
        {
            bool isAvailable = false;

            lock (_locker)
            {
                try
                {
                    isAvailable = (GetApplicatioinSettings() != null);
                }
                catch (Exception ex)
                {
                    isAvailable = false;

                    System.Diagnostics.Debug.WriteLine("Could not retrieve Application Settings record.");
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                }
            }

            return isAvailable;
        }

        protected bool IsValidSDataConnection(bool isUsingHttps, string sDataUrl, string userId, string password)
        {
            List<JT_Technician> technicians = null;

            lock (_locker)
            {
                System.Diagnostics.Debug.WriteLine("Testing sData connection by querying for technicians.");

                try
                {
                    SDataClient sdataClient = new SDataClient(isUsingHttps, sDataUrl, userId, password);

                    technicians = sdataClient.GetData<JT_Technician>(string.Empty, string.Empty);
                    
                    System.Diagnostics.Debug.WriteLine("Test call to sData returned " + technicians.Count.ToString() + " technicians.");
                }
                catch(Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine("Exception was caught!");
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                }                
            }

            return ((technicians != null) && (technicians.Count > 0));
        }

        public void SaveAppSettings(App_Settings appSettings)
        {
            int rows = 0;

            lock(_locker)
            {
                if (appSettings.ID == 0)
                {
                    rows = _database.Insert(appSettings);
                    System.Diagnostics.Debug.WriteLine("Rows inserted = " + rows.ToString());
                }
                else
                {
                    rows = _database.Update(appSettings);
                    System.Diagnostics.Debug.WriteLine("Rows updated = " + rows.ToString());
                }
            }
        }
    }
}
